PORT=5000
MONGODB_URI=mongodb+srv://netcom4001:sambo123@cluster0.9sa3p.mongodb.net/city-events?retryWrites=true&w=majority&appName=Cluster0


JWT_SECRET=Gq9&4jH@h!mZ^8T$x%qW

--------------------------
Backend Installation
create folder in backend root uploads
-------------------- 
npm init -y


npm install express mongoose cors dotenv bcryptjs jsonwebtoken

{express: For creating the server.
mongoose: For interacting with MongoDB.
cors: To allow cross-origin requests.
dotenv: To manage environment variables.
bcryptjs: For hashing passwords.
jsonwebtoken: For authentication (JWT).}

npm install multer

for images.

------------------------

Frontend installation 

-------------------
npm create vite@latest

Install React Router:
----
npm install react-router-dom
----
npm install

npm run dev 

sass
---
npm install sass

bootstrap

npm install bootstrap

npm install bootstrap @popperjs/core 

{ ** import 'bootstrap/dist/css/bootstrap.min.css';}

Install Axios for frontend:

Axios is a promise-based HTTP client for making API requests for frontend:. It's useful for communicating with your backend API:

npm install axios

npm install prop-types

---------------------------
delete file after install react 

assets/ delete -- react.svg

src/ delete -- App.css &  src/ delete -- index.css

Open App.jsx and remove any references to the deleted files (App.css, vite.svg).

index.html: Clean up any unnecessary comments or content.

main.jsx correctly imports and renders the App component.

-------------------
----- 
Frontend/
├── node_modules/
├── public/
├── src/
│   ├── components/
│   ├── pages/
│   ├── services/
│   ├── App.js
│   ├── index.js
│   └── ...
├── .gitignore
├── package.json
├── README.md
└── ...
------------- 
------------------ 
for backend package.json 

"scripts": {
    "test": "echo \"Error: no test specified\" && exit 1",
    "start": "node server.js"
  },

to work backend in terminal 
nodemon server.js

-----------------------------

for creating admin user with admin role 

Select your cluster 
choice your project database 
users 
Insert Document

{
  username: "admin",
  email: "admin@example.com",
  password: "hashedPassword",
  role: "admin"  // This distinguishes the admin from regular users
}

for hashpassword 
https://bcrypt-generator.com/
---------------


if will be list todo 

Changes Needed:
Frontend Changes:

Change titles/headings from "City Events" to "Todo List"
Remove price fields
Modify form fields to be more todo-oriented (e.g., task name, due date, priority, category)
Simplify the UI to be more task-focused
Backend Changes:

Modify the Event model to become a Task model
Remove price-related fields
Add todo-specific fields (like completion status, priority, due date)
Features to Keep:

User authentication (login/register)
Categories
Image uploads (could be for task attachments)
Comments on tasks
Admin dashboard for task management
Additional Todo-Specific Features Could Include:

Task completion status
Priority levels
Due dates
Task sorting and filtering
Task categories/tags
-------------

For Ads 


Current Features That Work Well for Ads:
User Authentication: Users can register/login to post their ads
Image Upload: For ad photos
Categories: For different types of ads
Price Field: Already implemented, perfect for ads
Admin Approval: Good for monitoring ad content
Comments: Allow potential buyers to ask questions
CRUD Operations: Create, Read, Update, Delete ads
Minimal Changes Needed:
Title Changes:

"City Events" → "Marketplace" or "Classified Ads"
"Events" → "Ads" or "Listings"
"Event Details" → "Ad Details"
Field Label Changes:

"Event Name" → "Ad Title"
"Event Time" → "Posted Date" or "Available Until"
"Event Location" → "Location" (can keep as is)
The basic structure and functionality would remain largely the same, making it a relatively straightforward conversion!

---------------------------

git hub
---- 
vscode 
----------
1- open VS Code and open your project folder (the main folder that contains both frontend and backend folders)

git init
----

2- Look at your GitHub page and copy the repository URL (it should look like https://github.com/yourusername/your-repo-name.git)

Then in VS Code terminal, type:

git remote add origin paste-your-repository-URL-here

WITHOUT the square brackets [ ]. The square brackets were causing the error.

-------------------

3- add your files to Git. In VS Code terminal, type:

git add .

(Note: The period "." after "add" means "add all files")

-----------------------------------------
4- let's commit your files with a message. In VS Code terminal, type:

git commit -m "Initial commit: City Events App"

------------------------------
5- push your code to GitHub. In VS Code terminal, type:
--
git push -u origin main
or if that doesn't work, try:

git push -u origin master

-- both error so 

let's check which branch you're on. Type:
git branch
Then, let's verify your remote URL. Type:
git remote -v

if error use 
git remote remove origin
and start again.


again all 
----- 
On GitHub Website:

Created new repository
Added description
Chose public repository
Didn't add README, .gitignore, or license (because you already had them)
In VS Code Terminal:

git init
----------
Added Remote Repository (without square brackets!):

git remote add origin https://github.com/yourusername/your-repo-name.git
---------
Added Files:

git add .
--------------
Committed Files:

git commit -m "Initial commit: City Events App"
---------------------
Pushed to GitHub:

git push -u origin master
-----------------
Authentication:

Authorized through browser
Gave permission to Git Credential Manager
After these steps, all your files appeared on your GitHub repository page.
--------------------------


End
/*signin-button********************/
.signin-button, .signin-button:link, .signin-button:visited {
  background-color: transparent;
  text-transform: uppercase;
  text-decoration: none;
  color: #000;
  font-size: 14px;
  padding: 8px 20px;
  border-radius: 5px;
  border: 1px solid #000;
  position: relative;
  cursor: pointer;
  transition: 0.3s background-color; }
.signin-button:hover, .signin-button:active {
  background-color: #96c67f; }

.btn-close:focus {
  box-shadow: none;
  outline: none; }

.btn-green {
  background-color: #96c67f;
  padding: 12px 20px;
  border: none; }

.btn-green:link,
.btn-green:hover {
  background-color: transparent;
  border: 1px solid #4b6340;
  background-color: #fff; }

.card {
  padding: 0;
  border-radius: 30px;
  overflow: hidden; }
  @media screen and (max-width: 991px) {
    .card {
      margin-bottom: 2rem; } }
  .card .card-img-top {
    width: 100%;
    height: 15vw;
    object-fit: cover; }
    @media screen and (max-width: 991px) {
      .card .card-img-top {
        height: 40vw; } }
    @media screen and (max-width: 767px) {
      .card .card-img-top {
        height: 60vw; } }
  .card .card-body .card-text {
    font-size: 14px;
    color: #9b948e; }

*,
*::after,
*::before {
  margin: 0;
  padding: 0;
  box-sizing: inherit; }

body {
  box-sizing: border-box;
  font-family: "Poppins", sans-serif;
  max-width: 90%;
  margin: auto;
  background-color: #eee8e2;
  text-transform: capitalize; }

/** NavBar */
.navbar {
  background-color: #fff;
  height: 80px;
  margin: 20px;
  border-radius: 16px;
  padding: 0.5rem; }
  @media screen and (max-width: 991px) {
    .navbar {
      background-color: #eee8e2; } }

.navbar-toggler {
  border: none;
  font-size: 1.25rem; }
  .navbar-toggler:focus, .navbar-toggler.btn-close:focus {
    box-shadow: none;
    outline: none; }

/*nav-link*/
.nav-link:link,
.nav-link:visited {
  color: #000;
  font-weight: 500;
  position: relative; }
  @media screen and (max-width: 991px) {
    .nav-link:link,
    .nav-link:visited {
      font-size: 1.2rem;
      color: #fff; } }
  .nav-link:link:hover, .nav-link:link:active,
  .nav-link:visited:hover,
  .nav-link:visited:active {
    color: #4b6340; }
    @media screen and (max-width: 991px) {
      .nav-link:link:hover, .nav-link:link:active,
      .nav-link:visited:hover,
      .nav-link:visited:active {
        display: block;
        background-color: #eee8e2;
        color: #4b6340 !important;
        font-weight: 600; } }
  @media screen and (min-width: 992px) {
    .nav-link:link::before,
    .nav-link:visited::before {
      content: "";
      position: absolute;
      bottom: 0;
      left: 50%;
      transform: translateX(-50%);
      width: 0;
      height: 2px;
      background-color: #96c67f;
      visibility: hiddn;
      transition: 0.3s ease-in-out; }
    .nav-link:link:hover::before, .nav-link:link:active::before,
    .nav-link:visited:hover::before,
    .nav-link:visited:active::before {
      width: 100%;
      visibility: visible; } }

.offcanvas {
  background-color: #474644; }
  @media screen and (max-width: 568px) {
    .offcanvas {
      max-width: 80%; } }

main {
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  gap: 5rem; }

.hero {
  margin-top: 10rem; }
  .hero__flex {
    padding: 0 20px;
    display: flex;
    flex-direction: row-reverse;
    justify-content: space-between;
    align-items: center;
    gap: 40px;
    position: relative; }
    @media screen and (max-width: 767px) {
      .hero__flex {
        flex-direction: column; } }
    .hero__flex-icon {
      position: absolute;
      top: 200px;
      right: -20px; }
      @media screen and (max-width: 767px) {
        .hero__flex-icon {
          top: 90px;
          width: 50px;
          right: -8px; } }
    .hero__flex-box-text {
      background-color: #fff;
      width: 200px;
      text-align: center;
      padding: 10px;
      border-radius: 20px;
      position: absolute;
      bottom: 5%;
      right: 20%; }
      .hero__flex-box-text p {
        margin: 0; }
      @media screen and (max-width: 767px) {
        .hero__flex-box-text {
          bottom: 52%;
          right: 55%;
          padding: 5px; } }
      @media screen and (max-width: 568px) {
        .hero__flex-box-text {
          bottom: 73%;
          right: 65%;
          width: 128px; }
          .hero__flex-box-text p {
            font-size: 12px !important; } }
      .hero__flex-box-text .p-2 {
        color: #9b948e; }
  .hero__box-img img {
    width: 100%;
    height: 500px;
    display: block;
    border-radius: 50%; }
    @media screen and (max-width: 767px) {
      .hero__box-img img {
        height: auto; } }
  @media screen and (max-width: 767px) {
    .hero__content {
      width: 100%;
      text-align: center; } }
  .hero__content h1 {
    font-size: 3.3rem;
    text-shadow: 2px 2px 2px #242424;
    line-height: 1.5;
    margin-bottom: 12px;
    color: #000; }
    @media screen and (max-width: 991px) {
      .hero__content h1 {
        font-size: 2.3rem; } }
  .hero__content p {
    font-size: 1.4rem;
    margin-bottom: 12px; }
    @media screen and (max-width: 767px) {
      .hero__content p {
        font-size: 1.2rem; } }

/*press**/
.container-press {
  padding: 5rem 5rem 0 5rem; }

.press {
  display: flex;
  justify-content: center;
  align-items: center; }
  @media screen and (max-width: 767px) {
    .press {
      flex-direction: column; } }
  .press__logo {
    width: 150% !important;
    margin: 20px 20px 50px; }
    @media screen and (max-width: 767px) {
      .press__logo {
        width: 60%; } }

/*# sourceMappingURL=style.css.map */
